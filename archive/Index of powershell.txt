#########zadanie1###############
Get-Process | Sort-Object -Property StartTime | Select-Object Name, StartTime

###############zadanie2############

Get-EventLog -LogName Application -Newest 5 | Select-Object -ExpandProperty Message | Sort-Object -Unique


###############zadanie3##############

$disk = Get-PSDrive -Name C
$currentDate = Get-Date
$report = [PSCustomObject]@{
    Date = $currentDate
    DriveLetter = $disk.Name
    TotalSizeGB = [math]::round($disk.Used/1GB, 2)
    FreeSpaceGB = [math]::round($disk.Free/1GB, 2)
    UsedSpaceGB = [math]::round($disk.Used/1GB, 2)
}

$report | ConvertTo-Html -Property Date, DriveLetter, TotalSizeGB, FreeSpaceGB, UsedSpaceGB -Title "Disk Report" | Out-File "dysk_raport.html"


##############zadanie4###############

$cimSession = New-CimSession -ComputerName "localhost" -SessionOption (New-CimSessionOption -Protocol Dcom)
$memoryInfo = Get-CimInstance -ClassName Win32_PhysicalMemory -CimSession $cimSession
$memoryInfo | Select-Object Manufacturer, Capacity, Speed, PartNumber
Remove-CimSession -CimSession $cimSession

#############zadanie5#################

Test-Connection -ComputerName "localhost" -Count 4


############zadanie6#########################

$destinationPath = "C:\PlikiTekstowe"
for ($i = 1; $i -le 40; $i++) {
    $fileName = "$destinationPath\$i.txt"
    New-Item -ItemType File -Path $fileName -Force
    Write-Host "Utworzono plik: $fileName"
}

#############zadanie7######################


$serviceName = "wuauserv"
$service = Get-Service -Name $serviceName
if ($service.Status -eq "Running") {
    Write-Host "The service '$serviceName' is running. Stopping the service..."
    Stop-Service -Name $serviceName -Force
    Write-Host "The service '$serviceName' has been stopped."
} else {
    Write-Host "The service '$serviceName' is already stopped."
}


#############zadanie8################

$localComputerName = $env:COMPUTERNAME
$adminUsername = "$localComputerName\Administrator"
$admCred = Get-Credential -UserName $adminUsername -Message "Enter Password"
$localComputerName = $env:COMPUTERNAME
$adminUsername = "$localComputerName\Administrator"
$admCred = Get-Credential -UserName $adminUsername -Message "Enter Password"
$adminAccount = Get-LocalUser -Name "Administrator"

if ($adminAccount.Enabled -eq $false) {
    # Jeśli konto jest wyłączone, włącz je
    Enable-LocalUser -Name "Administrator"
    Write-Host "Konto Administratora zostało włączone."
}

Write-Host "Current user is $($env:USERNAME)"


##############zadanie9################


$remoteComputer = "localhost"
$cred = Get-Credential
Invoke-Command -ComputerName $remoteComputer -Credential $cred -ScriptBlock {
    $currentPath = Get-Location
    Write-Host "Aktualna ścieżka robocza na systemie zdalnym: $currentPath"
}


############zadanie10#############

$sessionComp1 = New-PSSession -ComputerName localhost
$sessionComp2 = New-PSSession -ComputerName localhost

$bitsStatusComp1 = (Invoke-Command -Session $sessionComp1 -ScriptBlock {
$bitsStatus }).Value

$wsearchStatusComp2 = (Invoke-Command -Session $sessionComp2 -ScriptBlock {
$wsearchStatus }).Value

if( $bitsStatusComp1 -eq 'Stopped' -and $wsearchStatusComp2 -eq 'Running' )
{
 Invoke-Command -Session $sessionComp1 -ScriptBlock { Start-Service bits }
 Invoke-Command -Session $sessionComp2 -ScriptBlock { Stop-Service wsearch }
}


############zadanie11################

if (-not (Test-Path $PROFILE)) {
    New-Item -Path $PROFILE -ItemType File -Force
    Write-Host "PowerShell profile created at $PROFILE"
} else {
    Write-Host "PowerShell profile already exists at $PROFILE"
}


Write-Host -BackgroundColor Yellow -ForegroundColor Black "Drive TEMP: will point to c:\temp"
Get-ExecutionPolicy

(ewentualnie)
Set-ExecutionPolicy "RemoteSigned"


###############zadanie12########################

$services = Get-Service
Write-Host "Usługi na lokalnym komputerze:"
$services | Format-Table -Property Name, Status


$sourcePath = "C:\temp"  
$destinationPath = "C:\"  
Copy-Item -Path $sourcePath -Destination $destinationPath -Force
Write-Host "Plik został skopiowany z $sourcePath do $destinationPath"


$newDir = "C:\new_folder"
New-Item -Path $newDir -ItemType Directory -Force
Write-Host "Nowy katalog został utworzony w $newDir"


$ram = Get-WmiObject -Class Win32_PhysicalMemory
Write-Host "Informacje o pamięci RAM:"
$ram | Format-Table -Property Manufacturer, Capacity, Speed


$cred = Get-Credential
Invoke-Command -ComputerName Stacja -Credential $cred -ScriptBlock {Write-Host "Skrypt uruchomiony na komputerze zdalnym."}


$jobs = Get-Job
Write-Host "Lista jobów:"
$jobs | Format-Table -Property Id, Name, Status


$firstJob = $jobs | Select-Object -First 1
$firstJobResult = Receive-Job -Job $firstJob
Write-Host "Wynik pierwszego job-a:"
$firstJobResult


$allJobResults = $jobs | ForEach-Object { Receive-Job -Job $_ }
Write-Host "Wynik wszystkich jobów:"
$allJobResults


$jobs | ForEach-Object { Remove-Job -Job $_ }
Write-Host "Wszystkie joby zostały usunięte."


New-ScheduledTaskTrigger -Daily -At "4:00PM"
Write-Host "Trigger zadania zaplanowanego utworzony na 16:00 codziennie."




$taskAction = New-ScheduledTaskAction -Execute "C:\scierzka\do\skryptu\skrypt.ps1"
Register-ScheduledTask -Action $taskAction -Trigger $taskTrigger -TaskName "MyScheduledTask"
Write-Host "Zaplanowane zadanie zostało uruchomione."


Start-Sleep -Seconds 60
Write-Host "Czekanie zakończone."



Write-Host "Lista zdefiniowanych zadań:"
Get-ScheduledTask | Format-Table -Property TaskName, State, LastRunTime


Unregister-ScheduledTask -TaskName "MyScheduledTask" -Confirm:$false
Write-Host "Zadanie 'MyScheduledTask' zostało wyrejestrowane."



